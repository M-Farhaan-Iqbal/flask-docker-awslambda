# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches:
    - dev
    - sit
    - prod
  pull_request:
    branches:
    - dev
    - sit   
    - prod 

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      refToBuild:
        description: 'Branch, tag or commit SHA1 to build'
        required: true
        type: string

name: AWS ECR push and Terraform apply

jobs:
        
  test-app:
    name: Test App
    runs-on: ubuntu-latest

    
    steps:
    - name: Checkout
      if: github.event_name == 'push' || github.event_name == 'pull_request'
      uses: actions/checkout@v3
      
    - name: Checkout if dispatch
      if: github.event_name == 'workflow_dispatch'
      uses: actions/checkout@v3
      with:
        ref: ${{ inputs.refToBuild }}


    - name: Build the image
      id: build-image
      run: |
        echo "building images..."
        docker build -t flask-docker-awslambda ./App/

    - name: run the test env and test
      id: run-compose
      run: |
        echo "testing built image..."
        cd ./API-Testing
        docker-compose up -d
        pip install -r requirements-test.txt
        python test_script.py
        

  deploy-image:
    name: Deploy image
    needs: test-app
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      if: github.event_name == 'push' || github.event_name == 'pull_request'
      uses: actions/checkout@v3
      
    - name: Checkout if dispatch
      if: github.event_name == 'workflow_dispatch'
      uses: actions/checkout@v3
      with:
        ref: ${{ inputs.refToBuild }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1


    - name: Set up environment variables
      run: |
        echo "IMAGE_TAG=${GITHUB_REF##*/}_${GITHUB_SHA::7}" >> $GITHUB_ENV
        echo "IMAGE_TAG_LATEST=latest_${GITHUB_REF##*/}" >> $GITHUB_ENV

    - name: Set up environment variables
      if: github.event_name == 'workflow_dispatch'
      run: |
        INPUT_REF_TO_BUILD=${{ inputs.refToBuild }}
        FIRST_7_CHARS=${INPUT_REF_TO_BUILD:0:7}
        echo "First 7 characters of ${{ inputs.refToBuild }} is  $FIRST_7_CHARS"
        echo "IMAGE_TAG=${GITHUB_REF##*/}_$FIRST_7_CHARS" >> $GITHUB_ENV
    - name: Build the image push the tagged image to Amazon ECR

      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
      run: |
        echo "building images..."
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./App/
        echo "Tagged Image Tag: $IMAGE_TAG will be pushed as automatically triggered"
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Build the image latest push the latest image to Amazon ECR
      if: github.event_name == 'push' || github.event_name == 'pull_request'
      id: build-image-latest
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
      run: |
        echo "retagging images..."
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_LATEST
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_LATEST



    - name: apply image to lambda
      id: apply-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
      run: |
        LAMBDA_FUNCTION_NAME=$(aws lambda list-functions --query "Functions[?contains(FunctionName, '${GITHUB_REF##*/}')].FunctionName" --output text)
        IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        aws lambda update-function-code --function-name "$LAMBDA_FUNCTION_NAME" --image-uri "$IMAGE_URI"
