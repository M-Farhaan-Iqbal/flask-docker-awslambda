on:
  push:
    branches:
      - main
      - dev
      - sit
  pull_request:
    branches:
      - main
      - dev
      - sit
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

name: AWS ECR push

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Set up environment variables
      run: |
        echo "IMAGE_TAG=${GITHUB_REF##*/}_${GITHUB_SHA::7}" >> $GITHUB_ENV
        echo "IMAGE_TAG_LATEST=${GITHUB_REF##*/}_latest" >> $GITHUB_ENV

    - name: Log Environment Variables
      run: |
        echo "Image Tag: $IMAGE_TAG"
        echo "Image Tag Latest: $IMAGE_TAG_LATEST"

    - name: Build, tag, and push the image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
      run: |
        echo "building images..."
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_LATEST .
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
    - name: Build, tag, and push the image to Amazon ECR
      id: push-latest
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
      if: github.event_name == 'push' || github.event_name == 'pull_request'
      run: |
        echo "latet Image Tag: $IMAGE_TAG will be pushed as automatically triggered"
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_LATEST
     
    